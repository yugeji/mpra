'''Trains a simple convnet on the MNIST dataset.
Gets to 99.25% test accuracy after 12 epochs
(there is still a lot of margin for parameter tuning).
16 seconds per epoch on a GRID K520 GPU.
'''

from __future__ import print_function
import tensorflow as tf
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K

from tensorflow.python.client import device_lib

config = tf.ConfigProto()
#config.gpu_options.per_process_gpu_memory_fraction = 0.1
#config.log_device_placement = True #see where all the nodes are being placed
sess = tf.Session(config=config)
K.set_session(sess)

with tf.device('/cpu:0'):
          
          batch_size = 128
          num_classes = 10
          epochs = 12

          # input image dimensions
          img_rows, img_cols = 28, 28

          # the data, shuffled and split between train and test sets
          (x_train, y_train), (x_test, y_test) = mnist.load_data()

          if K.image_data_format() == 'channels_first':
                x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
                x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
                input_shape = (1, img_rows, img_cols)
          else:
                x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
                x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
                input_shape = (img_rows, img_cols, 1)

          x_train = x_train.astype('float32')
          x_test = x_test.astype('float32')
          x_train /= 255
          x_test /= 255
          print('x_train shape:', x_train.shape)
          print(x_train.shape[0], 'train samples')
          print(x_test.shape[0], 'test samples')

          # convert class vectors to binary class matrices
          y_train = keras.utils.to_categorical(y_train, num_classes)
          
          
          models = []
          for i in range(2):
                model = Sequential()
                model.add(Conv2D(32, kernel_size=(3, 3),
                                 activation='relu',
                                 input_shape=input_shape))
                model.add(Conv2D(64, (3, 3), activation='relu'))
                model.add(MaxPooling2D(pool_size=(2, 2)))
                model.add(Dropout(0.25)) 
                model.add(Flatten())
                model.add(Dense(128, activation='relu'))
                model.add(Dropout(0.5))
                model.add(Dense(num_classes, activation='softmax'))

                model.compile(loss=keras.losses.categorical_crossentropy,
                         optimizer=keras.optimizers.Adadelta(),
                         metrics=['accuracy'])

                models.append(model)

with tf.device('/gpu:0'):
          
          batch_size = 128
          num_classes = 10
          epochs = 12

          # input image dimensions
          img_rows, img_cols = 28, 28

          # the data, shuffled and split between train and test sets
          (x_train, y_train), (x_test, y_test) = mnist.load_data()

          if K.image_data_format() == 'channels_first':
                x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
                x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
                input_shape = (1, img_rows, img_cols)
          else:
                x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
                x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
                input_shape = (img_rows, img_cols, 1)

          x_train = x_train.astype('float32')
          x_test = x_test.astype('float32')
          x_train /= 255
          x_test /= 255
          print('x_train shape:', x_train.shape)
          print(x_train.shape[0], 'train samples')
          print(x_test.shape[0], 'test samples')

          # convert class vectors to binary class matrices
          y_train = keras.utils.to_categorical(y_train, num_classes)
          y_test = keras.utils.to_categorical(y_test, num_classes)


          #Tensorboard
          callback = keras.callbacks.TensorBoard(log_dir='./logs',
                                       histogram_freq=0,
                                       write_graph=True,
                                       write_grads=False,
                                       write_images=True,
                                       embeddings_freq=0,
                                       embeddings_layer_names=None,
                                       embeddings_metadata=None)

          models[0].fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=2, validation_data=(x_test, y_test), callbacks=[callback])

          score1 = models[0].evaluate(x_test, y_test, verbose=2)
          print('First test loss:', score1[0])
          print('First test accuracy:', score1[1])


with tf.device('/gpu:1'):
          
          batch_size = 128
          num_classes = 10
          epochs = 12

          # input image dimensions
          img_rows, img_cols = 28, 28

          # the data, shuffled and split between train and test sets
          (x_train, y_train), (x_test, y_test) = mnist.load_data()

          if K.image_data_format() == 'channels_first':
                x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
                x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
                input_shape = (1, img_rows, img_cols)
          else:
                x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
                x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
                input_shape = (img_rows, img_cols, 1)

          x_train = x_train.astype('float32')
          x_test = x_test.astype('float32')
          x_train /= 255
          x_test /= 255
          print('x_train shape:', x_train.shape)
          print(x_train.shape[0], 'train samples')
          print(x_test.shape[0], 'test samples')

          # convert class vectors to binary class matrices
          y_train = keras.utils.to_categorical(y_train, num_classes)
          y_test = keras.utils.to_categorical(y_test, num_classes)


          #Tensorboard
          callback = keras.callbacks.TensorBoard(log_dir='./logs',
                                       histogram_freq=0,
                                       write_graph=True,
                                       write_grads=False,
                                       write_images=True,
                                       embeddings_freq=0,
                                       embeddings_layer_names=None,
                                       embeddings_metadata=None)
      
          
          models[1].fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=2, validation_data=(x_test, y_test), callbacks=[callback])


          score2 = models[1].evaluate(x_test, y_test, verbose=2)
          print('Second test loss:', score2[0])
          print('Second test accuracy:', score2[1])



